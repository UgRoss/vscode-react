{"import React":{"prefix":"imr","body":"import React from 'react';\n","description":"import React"},"import React, { Component }":{"prefix":"imrc","body":"import React, { Component } from 'react';\n","description":"import React, { Component }"},"import ReactDOM":{"prefix":"imrd","body":"import ReactDOM from 'react-dom';\n","description":"import ReactDOM"},"import PropTypes":{"prefix":"impt","body":"import PropTypes from 'prop-types';\n","description":"import PropTypes"},"Component Import":{"prefix":"imc","body":"import ${1:ComponentName} from 'components/${1:ComponentName}';\n","description":"import own React component"},"import Connect from react-redux":{"prefix":"imconnect","body":"import { connect } from 'react-redux';\n","description":"import connect from react-redux"},"import Provider from react-redux":{"prefix":"improvider","body":"import { Provider } from 'react-redux';\n","description":"import Provider from react-redux"},"import React Router":{"prefix":"imrr","body":"import { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\n","description":"import React Router"},"import Link from React Router":{"prefix":"imrrlink","body":"import { Link } from 'react-router-dom';\n","description":"import Link from react-router-dom"},"PropTypes array":{"prefix":"pta","body":"${1:propName}: PropTypes.array,","description":"PropTypes array"},"PropTypes array required":{"prefix":"ptar","body":"${1:propName}: PropTypes.array.isRequired,","description":"PropTypes array required"},"PropTypes boolean":{"prefix":"ptb","body":"${1:propName}: PropTypes.bool,","description":"PropTypes boolean"},"PropTypes boolean required":{"prefix":"ptbr","body":"${1:propName}: PropTypes.bool.isRequired,","description":"PropTypes boolean required"},"PropTypes function":{"prefix":"ptf","body":"${1:propName}: PropTypes.func,","description":"PropTypes function"},"PropTypes function required":{"prefix":"ptfr","body":"${1:propName}: PropTypes.func.isRequired,","description":"PropTypes function required"},"PropTypes number":{"prefix":"ptn","body":"${1:propName}: PropTypes.number,","description":"PropTypes number"},"PropTypes number required":{"prefix":"ptnr","body":"${1:propName}: PropTypes.number.isRequired,","description":"PropTypes number required"},"PropTypes object":{"prefix":"pto","body":"${1:propName}: PropTypes.object,","description":"PropTypes object"},"PropTypes object required":{"prefix":"ptor","body":"${1:propName}: PropTypes.object.isRequired,","description":"PropTypes object required"},"PropTypes string":{"prefix":"pts","body":"${1:propName}: PropTypes.string,","description":"PropTypes string"},"PropTypes string required":{"prefix":"ptsr","body":"${1:propName}: PropTypes.string.isRequired,","description":"PropTypes string required"},"PropTypes symbol":{"prefix":"ptsym","body":"${1:propName}: PropTypes.symbol,","description":"PropTypes symbol"},"PropTypes symbol required":{"prefix":"ptsymr","body":"${1:propName}: PropTypes.symbol.isRequired,","description":"PropTypes symbol required"},"PropTypes node":{"prefix":"ptnd","body":"${1:propName}: PropTypes.node,","description":"Anything that can be rendered: numbers, strings, elements or an array"},"PropTypes node required":{"prefix":"ptndr","body":"${1:propName}: PropTypes.node.isRequired,","description":"Anything that can be rendered: numbers, strings, elements or an array"},"PropTypes element":{"prefix":"ptel","body":"${1:propName}: PropTypes.element,","description":"PropTypes element required"},"PropTypes element required":{"prefix":"ptelr","body":"${1:propName}: PropTypes.element.isRequired,","description":"PropTypes element required"},"PropTypes element type":{"prefix":"ptelt","body":"${1:propName}: PropTypes.elementType,","description":"A React element type (ie. MyComponent)."},"PropTypes element type required":{"prefix":"pteltr","body":"${1:propName}: PropTypes.elementType.isRequired,","description":"A React element type (ie. MyComponent) required."},"PropTypes instanceOf":{"prefix":"pti","body":"${1:propName}: PropTypes.instanceOf($2),","description":"Is an instance of a class prop type"},"PropTypes instanceOf required":{"prefix":"ptir","body":"${1:propName}: PropTypes.instanceOf($2).isRequired,","description":"Is an instance of a class prop type required"},"PropTypes enum (oneOf)":{"prefix":"pte","body":"${1:propName}: PropTypes.oneOf(['$2']),","description":"You can ensure that your prop is limited to specific values by treating it as an enum."},"PropTypes enum (oneOf) required":{"prefix":"pter","body":"${1:propName}: PropTypes.oneOf(['$2']).isRequired,","description":"You can ensure that your prop is limited to specific values by treating it as an enum. [Required]"},"PropTypes oneOfType":{"prefix":"ptet","body":["${1:propName}: PropTypes.oneOfType([","\t$2","]),"],"description":"An object that could be one of many types"},"PropTypes oneOfType required":{"prefix":"ptetr","body":["${1:propName}: PropTypes.oneOfType([","\t$2","]).isRequired,"],"description":"An object that could be one of many types [Required]"},"PropTypes arrayOf":{"prefix":"ptao","body":"${1:propName}: PropTypes.arrayOf($2),","description":"An array of a certain type"},"PropTypes arrayOf required":{"prefix":"ptaor","body":"${1:propName}: PropTypes.arrayOf($2).isRequired,","description":"An array of a certain type [Required]"},"PropTypes objectOf":{"prefix":"ptoo","body":"${1:propName}: PropTypes.objectOf($2),","description":"An object with property values of a certain type"},"PropTypes objectOf required":{"prefix":"ptoor","body":"${1:propName}: PropTypes.objectOf($2).isRequired,","description":"An object with property values of a certain type [Required]"},"PropTypes shape":{"prefix":"ptsh","body":["${1:propName}: PropTypes.shape({","\t$2","}),"],"description":"An object taking on a particular shape"},"PropTypes shape required":{"prefix":"ptshr","body":["${1:propName}: PropTypes.shape({","\t$2","}).isRequired,"],"description":"An object taking on a particular shape required"},"PropTypes exact":{"prefix":"ptex","body":["${1:propName}: PropTypes.exact({","\t$2","}),"],"description":"An object with warnings on extra properties"},"PropTypes exact required":{"prefix":"ptexr","body":["${1:propName}: PropTypes.exact({","\t$2","}).isRequired,"],"description":"An object with warnings on extra properties required"},"PropTypes any":{"prefix":"ptany","body":"${1:propName}: PropTypes.any,","description":"Any prop type"},"describe block":{"prefix":"desc","body":["describe('$1', () => {","\t$0","});",""],"description":"Testing `describe` block"},"test block":{"prefix":"test","body":["test('should $1', () => {","\t$0","});",""],"description":"Testing `test` block"},"it block":{"prefix":"tit","body":["it('should $1', () => {","\t$0","});",""],"description":"Testing `it` block"},"React Component test":{"prefix":"rtest","body":["import React from 'react';","import renderer from 'react-test-renderer';","","import ${1:${TM_FILENAME_BASE}} from '../${1:${TM_FILENAME_BASE}}';","","describe('<${1:${TM_FILENAME_BASE}} />', () => {","\tconst defaultProps = {};","\tconst wrapper = renderer.create(<${1:${TM_FILENAME_BASE}} {...defaultProps} />);","","\tit('renders correctly', () => {","\t\texpect(wrapper).toMatchSnapshot();","\t});","});",""],"description":"Base React Component unit test template"},"useState":{"prefix":"useState","body":["const [${1:state}, set${1/(.*)/${1:/capitalize}/}] = useState<${2:type}>(${3:initialState});"],"description":"React useState hook"},"useEffect":{"prefix":"useEffect","body":["useEffect(() => {","\t${1:effect}","\treturn () => {","\t\t${2:cleanup}","\t}","}, [${3:input}]);"],"description":"React useEffect hook"},"useContext":{"prefix":"useContext","body":["const ${1:context} = useContext(${2:contextValue});"],"description":"React useContext hook"},"useReducer":{"prefix":"useReducer","body":["const [state, dispatch] = useReducer(${1:reducer}, ${2:initialState}, ${3:init});"],"description":"React useReducer hook"},"useCallback":{"prefix":"useCallback","body":["useCallback(","\t() => {","\t\t${1:callback}","\t},","\t[${2:input}],",");"],"description":"React useCallback hook"},"useMemo":{"prefix":"useMemo","body":["useMemo(() => ${1:function}, ${2:input});"],"description":"React useMemo hook"},"useRef":{"prefix":"useRef","body":["const ${1:ref} = useRef<${2:HTMLInputElement}>();"],"description":"React useRef hook"},"useImperativeHandle":{"prefix":"useImperativeHandle","body":["useImperativeHandle(","\t${1:ref},","\t() => {","\t\t${2:handler}","\t},","\t[${3:input}],",");"],"description":"React useImperativeHandle hook"},"useDebugValue":{"prefix":"useDebugValue","body":["useDebugValue(${1:value});"],"description":"React useDebugValue hook"},"useLayoutEffect":{"prefix":"useLayoutEffect","body":["useLayoutEffect(() => {","\t${1:effect}","\treturn () => {","\t\t${2:cleanup}","\t};","}, [${3:input}]);"],"description":"React useLayoutEffect hook"},"React Component":{"prefix":"rc","body":["import React from 'react';","","interface ${1}Props {","\t","}","","const ${1:${TM_FILENAME_BASE}}: React.FC<${1}Props> = () => {","\treturn (","\t\t<div>","\t\t\t$0","\t\t</div>","\t);","};","","export default ${1};"],"description":"React functional component with return statement"},"React Component without return":{"prefix":"rcwr","body":["import React from 'react';","","interface ${1}Props {","\t","}","","const ${1:${TM_FILENAME_BASE}}: React.FC<${1}Props> = () => (","\t<div>","\t\t$0","\t</div>",");","","export default ${1};"],"description":"React functional component without return statement"},"React Component with memo":{"prefix":"rcm","body":["import React, { memo } from 'react';","","interface ${1}Props {","\t","}","","const ${1:${TM_FILENAME_BASE}}: React.FC<${1}Props> = memo(() => {","\treturn (","\t\t<div>","\t\t\t$0","\t\t</div>","\t);","});","","export default ${1};"],"description":"React component with memo"},"React Class Component":{"prefix":"rcc","body":["import React from 'react';","","interface ${1}Props {","\t","}","","interface ${1}State {","\t","}","","class ${1:${TM_FILENAME_BASE}} extends React.Component<${1}Props, ${1}State> {","\tstate = {}","","\trender() {","\t\treturn (","\t\t\t<div>","\t\t\t\t$0","\t\t\t</div>","\t\t);","\t}","}","","","export default ${1};\n"],"description":"React Class Component"},"React PureComponent":{"prefix":"rpc","body":["import React, { PureComponent } from 'react';","","interface ${1}Props {","\t","}","","class ${1:${TM_FILENAME_BASE}} extends PureComponent<${1}Props> {","\trender() {","\t\treturn (","\t\t\t<div>","\t\t\t\t$0","\t\t\t</div>","\t\t)","\t}","}","","export default ${1};\n"],"description":"React PureComponent class"},"React HOC":{"prefix":"rhoc","body":["import React from 'react';","","function ${1:withFoo}<T>(Component: React.ComponentType<T>) {","\tconst ${2:WithFoo}: React.FC<T> = (props) => {","\t\treturn <Component {...props} />;","\t};","","\t${2:WithFoo}.displayName = `${1:withFoo}(${Component.displayName || Component.name}`;","","\treturn ${2:WithFoo};","}","","export default ${1:withFoo};\n"],"description":"React HOC"},"React HOC Class Component":{"prefix":"rhocc","body":["import React from 'react';","","function ${1:withFoo}<T>(WrappedComponent: React.ComponentType<T>) {","\tclass ${2:WithFoo} extends React.Component<T> {","\t\tpublic static displayName = `${1:withFoo}(${WrappedComponent.displayName || WrappedComponent.name}`;","\t\tstate = {};","","\t\trender() {","\t\t\treturn <WrappedComponent {...this.props} />;","\t\t}","\t}","","\treturn ${2:WithFoo};","}","","export default ${1:withFoo};\n"],"description":"React HOC Class Component"},"React bind method":{"prefix":"rbind","body":"this.${1} = this.${1}.bind(this);","description":"React bind method to this"},"React Redux component":{"prefix":"rcr","body":["import React from 'react';","import { useSelector, useDispatch } from 'react-redux';","","interface ${2:IProps} {","\t","}","","const ${1:${TM_FILENAME_BASE}}: React.FC<${2:IProps}> = () => {","\tconst ${3:selector} = useSelector<InitialState, StateProps>((state: InitialState) => state.${3:selector});","\tconst dispatch = useDispatch();","","\treturn (","\t\t<div></div>","\t);","};","","export default ${1:${TM_FILENAME_BASE}};\n"],"description":"React Redux Component"},"React Redux Class Component":{"prefix":"rccr","body":["import React, { Component } from 'react';","import { connect } from 'react-redux';","","interface ${2:IProps} {","\t","}","interface ${3:IState} {","\t","}","","export class ${1:${TM_FILENAME_BASE}} extends Component<${2:IProps}, ${3:IState}> {","\tstate = {};","","\trender() {","\t\treturn (","\t\t\t<div>","\t\t\t\t$0","\t\t\t</div>","\t\t)","\t}","}","","const mapStateToProps = (state) => ({","\t","});","","const mapDispatchToProps = {","\t","};","","export default connect(mapStateToProps, mapDispatchToProps)(${1:${TM_FILENAME_BASE}});",""],"description":"React Class Component with Redux"},"Redux Reducer":{"prefix":"reducer","body":["export default (state = initialState, action) => {","\tswitch (action.type) {","\t\tcase ACTION_NAME:","\t\t\treturn Object.assign({}, state, {"," ","\t\t\t});","\t\tdefault:","\t\t\treturn state;","\t}","};"],"description":"Redux reducer template"},"Redux mapDispatchToProps":{"prefix":"mdtp","body":["const mapDispatchToProps = (dispatch, ownProps) => bindActionCreators({","\t${1:action},","}, dispatch);\n"],"description":"Redux mapDispatchToProps"},"Redux mapStateToProps":{"prefix":"mstp","body":["const mapStateToProps = (state, ownProps) => ({","\t$0","});\n"],"description":"Redux mapStateToProps"},"Redux mapStateToProps & mapDispatchToProps":{"prefix":"rmap","body":["const mapStateToProps = (state) => ({","\t${1}","});\n","const mapDispatchToProps = (dispatch) => bindActionCreators({","  ","}, dispatch);",""],"description":"Redux mapStateToProps & mapDispatchToProps"},"Redux connect":{"prefix":"connect","body":["export default connect(mapStateToProps, mapDispatchToProps)(${1:${TM_FILENAME_BASE}})"],"description":"Redux connect"},"reduxAction":{"prefix":"action","body":["export const ${1:actionName} = (${2:param}) => ({","\ttype: ${3:TYPE},","\tpayload: ${4:payload}","});\n"],"description":"Redux action"},"useDispatch":{"prefix":"useDispatch","body":["const dispatch = useDispatch();"],"description":"Redux useDispatch hook"},"useSelector":{"prefix":"useSelector","body":["const ${1:name} = useSelector(state => state.${1:name});"],"description":"Redux useSelector hook"},"useStore":{"prefix":"useStore","body":["const store = useStore();"],"description":"Redux useStore hook"}}