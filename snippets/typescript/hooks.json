{
  "useState": {
    "prefix": "useState",
    "body": [
      "const [${1:state}, set${1/(.*)/${1:/capitalize}/}] = useState<${2:type}>(${3:initialState});"
    ],
    "description": "React useState hook"
  },
  "useEffect": {
    "prefix": "useEffect",
    "body": [
      "useEffect(() => {",
      "\t${1:effect}",
      "\treturn () => {",
      "\t\t${2:cleanup}",
      "\t}",
      "}, [${3:input}]);"
    ],
    "description": "React useEffect hook"
  },
  "useContext": {
    "prefix": "useContext",
    "body": ["const ${1:context} = useContext(${2:contextValue});"],
    "description": "React useContext hook"
  },
  "useReducer": {
    "prefix": "useReducer",
    "body": ["const [state, dispatch] = useReducer(${1:reducer}, ${2:initialState}, ${3:init});"],
    "description": "React useReducer hook"
  },
  "useCallback": {
    "prefix": "useCallback",
    "body": ["useCallback(", "\t() => {", "\t\t${1:callback}", "\t},", "\t[${2:input}],", ");"],
    "description": "React useCallback hook"
  },
  "useMemo": {
    "prefix": "useMemo",
    "body": ["useMemo(() => ${1:function}, ${2:input});"],
    "description": "React useMemo hook"
  },
  "useRef": {
    "prefix": "useRef",
    "body": ["const ${1:ref} = useRef<${2:HTMLInputElement}>();"],
    "description": "React useRef hook"
  },
  "useImperativeHandle": {
    "prefix": "useImperativeHandle",
    "body": [
      "useImperativeHandle(",
      "\t${1:ref},",
      "\t() => {",
      "\t\t${2:handler}",
      "\t},",
      "\t[${3:input}],",
      ");"
    ],
    "description": "React useImperativeHandle hook"
  },
  "useDebugValue": {
    "prefix": "useDebugValue",
    "body": ["useDebugValue(${1:value});"],
    "description": "React useDebugValue hook"
  },
  "useLayoutEffect": {
    "prefix": "useLayoutEffect",
    "body": [
      "useLayoutEffect(() => {",
      "\t${1:effect}",
      "\treturn () => {",
      "\t\t${2:cleanup}",
      "\t};",
      "}, [${3:input}]);"
    ],
    "description": "React useLayoutEffect hook"
  }
}
