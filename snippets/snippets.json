{
  /* ======================== 
	// Main
	======================== */
  "React Class Component": {
    "prefix": "rc",
    "body": [
      "import React from 'react';",
      "import PropTypes from 'prop-types';",
      "\nclass ${1:ComponentName} extends React.Component {",
      "\trender() {\n\t\treturn (",
      "\t\t\t<div></div>",
      "\t\t);\n\t}",
      "}",
      "\n${1:ComponentName}.propTypes = {};",
      "\nexport default ${1:ComponentName};\n"
    ],
    "description": "React Component"
  },
  "React Component With Constructor": {
    "prefix": "rcc",
    "body": [
      "import React from 'react';",
      "import PropTypes from 'prop-types';",
      "\nclass ${1:ComponentName} extends React.Component {",
      "\tconstructor(props) {",
      "\t\tsuper(props);",
      "\t\tthis.state = {};",
      "\t}",
      "\n\trender() {\n\t\treturn (",
      "\t\t\t<div></div>",
      "\t\t);\n\t}",
      "}",
      "\n${1:ComponentName}.propTypes = {};",
      "\nexport default ${1:ComponentName};\n"
    ],
    "description": "React Component with constructor"
  },
  "React Redux Component": {
    "prefix": "rcr",
    "body": [
      "import React from 'react';",
      "import PropTypes from 'prop-types';",
      "import { connect } from 'react-redux';",
      "import { bindActionCreators } from 'redux';",
      "\nclass ${1:ComponentName} extends React.Component {",
      "\trender() {\n\t\treturn (",
      "\t\t\t<div></div>",
      "\t\t);\n\t}",
      "}",
      "\n${1:ComponentName}.propTypes = {};",
      "\nconst mapStateToProps = (state) => ({",
      "  ",
      "});",
      "",
      "const mapDispatchToProps = (dispatch) => bindActionCreators({",
      "  ",
      "}, dispatch);",
      "\nexport default connect(mapStateToProps, mapDispatchToProps)(${1:componentName});\n"
    ],
    "description": "React Component with redux and proptypes"
  },
  "React functional component": {
    "prefix": "rcf",
    "body": [
      "import React from 'react';",
      "import PropTypes from 'prop-types';",
      "\nconst ${1:ComponentName} = () => {",
      "\treturn (",
      "\t\t<div></div>",
      "\t);",
      "};",
      "\n${1:ComponentName}.propTypes = {};",
      "\nexport default ${1:ComponentName};\n"
    ],
    "description": "React Functional Component"
  },
  "React functional component with Redux": {
    "prefix": "rcfr",
    "body": [
      "import React from 'react';",
      "import PropTypes from 'prop-types';",
      "import { connect } from 'react-redux';",
      "import { bindActionCreators } from 'redux';",
      "\nconst ${1:ComponentName} = () => {",
      "\treturn (",
      "\t\t<div></div>",
      "\t);",
      "};",
      "\n${1:ComponentName}.propTypes = {};",
      "\nconst mapStateToProps = (state) => ({",
      "  ",
      "});",
      "",
      "const mapDispatchToProps = (dispatch) => bindActionCreators({",
      "  ",
      "}, dispatch);",
      "",
      "export default connect(mapStateToProps, mapDispatchToProps)(${1:componentName});\n"
    ],
    "description": "React Functional Component"
  },
  "React Higher-Order Component": {
    "prefix": "rhoc",
    "body": [
      "import React from 'react';\n",
      "function ${1:WithFooHoc}(WrappedComponent) {",
      "\treturn class ${2:WithFoo} extends React.Component {",
      "\t\tconstructor(props) {",
      "\t\t\tsuper(props);",
      "\t\t\tthis.state = {};",
      "\t\t}\n",
      "\t\trender() {",
      "\t\t\treturn <WrappedComponent{...this.props} />;",
      "\t\t}",
      "\t};",
      "}",
      "\nexport default ${1:WithFooHoc};\n"
    ],
    "description": "React HOC Component"
  },
  "React Higher-Order functional component": {
    "prefix": "rhocf",
    "body": [
      "import React from 'react';\n",
      "function ${1:withFoo}(Component) {",
      "\tfunction ${2:WithFoo}(props) {",
      "\t\treturn <Component {...props} />;",
      "\t}\n",
      "\t${2:WithFoo}.displayName = `${1:withFoo}(${Component.displayName || Component.name}`;\n",
      "\treturn ${2:WithFoo};",
      "}\n",
      "export default ${1:withFoo};\n"
	],
	"description": "React HOC with functional component"
  },
  /* ======================== 
	// Helpers
	======================== */
  "Class Constructor": {
    "prefix": "rconst",
    "body": "constructor(props) {\n\tsuper(props);\n\tthis.state = {};\n\t$0\n}\n",
    "description": "Adds a default constructor for the class that contains props as arguments"
  },
  "React bind method": {
    "prefix": "rbind",
    "body": "this.${1} = this.${1}.bind(this);",
    "description": "React bind method to this"
  },
  /* ======================== 
	// PropTypes
	======================== */
  // Number
  "React PropType number": {
    "prefix": "rpn",
    "body": "${1:propName}: PropTypes.number,",
    "description": "PropTypes number"
  },
  "React PropType number required": {
    "prefix": "rpnr",
    "body": "${1:propName}: PropTypes.number.isRequired,",
    "description": "PropTypes number required"
  },
  // Object
  "React PropType object": {
    "prefix": "rpo",
    "body": "${1:propName}: PropTypes.object,",
    "description": "PropTypes object"
  },
  "React PropType object required": {
    "prefix": "rpor",
    "body": "${1:propName}: PropTypes.object.isRequired,",
    "description": "PropTypes object required"
  },
  // Array
  "React PropType array": {
    "prefix": "rpa",
    "body": "${1:propName}: PropTypes.array,",
    "description": "PropTypes array"
  },
  "React PropType array required": {
    "prefix": "rpar",
    "body": "${1:propName}: PropTypes.array.isRequired,",
    "description": "PropTypes array required"
  },
  // Bool
  "React PropType bool": {
    "prefix": "rpb",
    "body": "${1:propName}: PropTypes.bool,",
    "description": "PropTypes boolean"
  },
  "React PropType bool required": {
    "prefix": "rpbr",
    "body": "${1:propName}: PropTypes.bool.isRequired,",
    "description": "PropTypes boolean required"
  },
  // Element
  "React PropType element": {
    "prefix": "rpe",
    "body": "${1:propName}: PropTypes.element,",
    "description": "PropTypes element"
  },
  "React PropType element required": {
    "prefix": "rper",
    "body": "${1:propName}: PropTypes.element.isRequired,",
    "description": "PropTypes required"
  },
  // Function
  "React PropType function": {
    "prefix": "rpf",
    "body": "${1:propName}: PropTypes.func,",
    "description": "PropTypes func"
  },
  "React PropType function required": {
    "prefix": "rpfr",
    "body": "${1:propName}: PropTypes.func.isRequired,",
    "description": "PropTypes func required"
  },
  // Shape
  "React PropType shape": {
    "prefix": "rps",
    "body": ["${1:propName}: PropTypes.shape({", "\t${2}", "}),"],
    "description": "PropTypes shape"
  },
  "React PropType shape required": {
    "prefix": "rpsr",
    "body": ["${1:propName}: PropTypes.shape({", "\t${2}", "}).isRequired,"],
    "description": "PropTypes shape required"
  },
  /* ======================== 
	// REDUX
	======================== */
  "Redux map": {
    "prefix": "rxmap",
    "body": [
      "const mapStateToProps = (state) => ({",
      "\t${1}",
      "});\n",
      "const mapDispatchToProps = (dispatch) => bindActionCreators({",
      "  ",
      "}, dispatch);",
      ""
    ]
  },
  "Redux Reducer": {
    "prefix": "reducer",
    "body": [
      "export default (state = initialState, action) => {",
      "\tswitch (action.type) {",
      "\t\tcase ACTION_NAME:",
      "\t\t\treturn Object.assign({}, state, {",
      " ",
      "\t\t\t});",
      "\t\tdefault:",
      "\t\t\treturn state;",
      "\t}",
      "};"
    ]
  },
  "reduxAction": {
    "prefix": "rxaction",
    "body": ["export const ${1:actionName} = (${2:param}) => ({", "\ttype: ${3:TYPE},", "\tpayload: ${4:payload}", "});\n"]
  }
}
